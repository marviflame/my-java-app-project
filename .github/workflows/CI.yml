

name: CI-CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  compile_maven:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn compile

  unit_test:

    runs-on: ubuntu-latest
    needs: compile_maven
    steps:
    - uses: actions/checkout@v4
    - name: Unit Testing
      run: mvn test

  security_check:

    runs-on: ubuntu-latest
    needs: unit_test
    steps:
    - uses: actions/checkout@v4
    - name: Trivy Installation
      run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install trivy -y

    - name: Trivy Fs Scan
      run:
          trivy fs --format table -o fs-report.json .

    - name: gitleaks Installation & Scan
      run: |
          sudo apt-get install gitleaks -y
          gitleaks detect source . -r gitleaks-report.json -f json

  sonaqube_scan:

    runs-on: ubuntu-latest
    needs: security_check
    permissions:
      contents: read
      security-events: write
      actions: read  
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
 
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  build_maven:

    runs-on: ubuntu-latest
    needs: sonaqube_scan
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: build the code
      run: mvn package

    - name: Upload Jar Artifact
      uses: actions/upload-artifact@v4
      with:
        name: demoapp.jar
        path: target/*.jar   

  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: build_maven
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Download JAR Artifact
      uses: actions/download-artifact@v4
      with:
        name: demoapp.jar

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub (if pushing)
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile  # Path to your Dockerfile
        tags: marviflame89/demoapp:1.0.0
        push: true  # Set to false for local testing

  deploy_to_server:
    runs-on: self-hosted
    needs: docker_build_and_push  # Waits for the image to be built/pushed
    steps:
    - name: SSH into Server & Update Container
    uses: appleboy/ssh-action@v1
    with:
      host: ${{ secrets.SSH_HOST }}  # Your server IP
      username: ${{ secrets.SSH_USERNAME }}
      key: ${{ secrets.SSH_PRIVATE_KEY }}
      script: |
          docker pull marviflame89/demoapp:1.0.0
          docker stop demoapp || true
          docker rm demoapp || true
          docker run -d \
            --name demoapp \
            -p 8080:8080 \  # Map your app's port
            --restart unless-stopped \
            marviflame89/demoapp:1.0.0
